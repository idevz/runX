<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="246.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="229" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="229" > </text>
<g id="frames">
<g >
<title>C:lj_cf_table_insert (1 samples, 0.03%)</title><rect x="753.2" y="101" width="0.3" height="15.0" fill="rgb(225,68,17)" rx="2" ry="2" />
<text  x="756.21" y="111.5" ></text>
</g>
<g >
<title>motan.utils:_n2b (19 samples, 0.52%)</title><rect x="1043.2" y="117" width="6.1" height="15.0" fill="rgb(228,190,51)" rx="2" ry="2" />
<text  x="1046.22" y="127.5" ></text>
</g>
<g >
<title>C:lj_ffh_string_byte (4 samples, 0.11%)</title><rect x="851.4" y="85" width="1.3" height="15.0" fill="rgb(240,100,2)" rx="2" ry="2" />
<text  x="854.39" y="95.5" ></text>
</g>
<g >
<title>C:lj_cf_ffi_clib___index (3 samples, 0.08%)</title><rect x="1028.1" y="101" width="1.0" height="15.0" fill="rgb(226,122,50)" rx="2" ry="2" />
<text  x="1031.10" y="111.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_now (6 samples, 0.16%)</title><rect x="1138.5" y="85" width="1.9" height="15.0" fill="rgb(230,12,2)" rx="2" ry="2" />
<text  x="1141.50" y="95.5" ></text>
</g>
<g >
<title>C:lj_cf_table_concat (20 samples, 0.55%)</title><rect x="1009.4" y="133" width="6.5" height="15.0" fill="rgb(233,225,2)" rx="2" ry="2" />
<text  x="1012.43" y="143.5" ></text>
</g>
<g >
<title>motan.server.init:_M.motan_server_do_request (2,675 samples, 72.97%)</title><rect x="12.3" y="133" width="861.0" height="15.0" fill="rgb(232,59,2)" rx="2" ry="2" />
<text  x="15.25" y="143.5" >motan.server.init:_M.motan_server_do_request</text>
</g>
<g >
<title>motan.protocol.motan2.codec:_M.decode (411 samples, 11.21%)</title><rect x="740.0" y="117" width="132.3" height="15.0" fill="rgb(235,112,16)" rx="2" ry="2" />
<text  x="743.02" y="127.5" >motan.protocol.m..</text>
</g>
<g >
<title>motan.server.init:invoker (302 samples, 8.24%)</title><rect x="1092.8" y="149" width="97.2" height="15.0" fill="rgb(243,11,48)" rx="2" ry="2" />
<text  x="1095.79" y="159.5" >motan.serve..</text>
</g>
<g >
<title>C:lj_ffh_setmetatable (1 samples, 0.03%)</title><rect x="760.6" y="101" width="0.3" height="15.0" fill="rgb(229,154,4)" rx="2" ry="2" />
<text  x="763.62" y="111.5" ></text>
</g>
<g >
<title>C:lj_cf_table_concat (9 samples, 0.25%)</title><rect x="1022.3" y="117" width="2.9" height="15.0" fill="rgb(243,18,8)" rx="2" ry="2" />
<text  x="1025.30" y="127.5" ></text>
</g>
<g >
<title>C:lj_cf_table_insert (14 samples, 0.38%)</title><rect x="1060.6" y="117" width="4.5" height="15.0" fill="rgb(230,115,11)" rx="2" ry="2" />
<text  x="1063.61" y="127.5" ></text>
</g>
<g >
<title>C:lj_ffh_pcall (12 samples, 0.33%)</title><rect x="756.8" y="101" width="3.8" height="15.0" fill="rgb(223,29,10)" rx="2" ry="2" />
<text  x="759.75" y="111.5" ></text>
</g>
<g >
<title>C:motan_simple_deserialize (24 samples, 0.65%)</title><rect x="1151.7" y="85" width="7.7" height="15.0" fill="rgb(249,98,43)" rx="2" ry="2" />
<text  x="1154.70" y="95.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_worker_exiting (2 samples, 0.05%)</title><rect x="11.6" y="133" width="0.7" height="15.0" fill="rgb(220,28,11)" rx="2" ry="2" />
<text  x="14.61" y="143.5" ></text>
</g>
<g >
<title>=content_by_lua(app-dev.conf:29):1 (2,682 samples, 73.16%)</title><rect x="10.0" y="181" width="863.3" height="15.0" fill="rgb(210,5,31)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >=content_by_lua(app-dev.conf:29):1</text>
</g>
<g >
<title>motan.utils:_M.msb_stringtonumber (34 samples, 0.93%)</title><rect x="841.7" y="101" width="11.0" height="15.0" fill="rgb(249,82,25)" rx="2" ry="2" />
<text  x="844.73" y="111.5" ></text>
</g>
<g >
<title>C:motan_simple_serialize (30 samples, 0.82%)</title><rect x="1083.1" y="101" width="9.7" height="15.0" fill="rgb(209,16,32)" rx="2" ry="2" />
<text  x="1086.14" y="111.5" ></text>
</g>
<g >
<title>motan.utils:_M.msb_numbertobytes (22 samples, 0.60%)</title><rect x="1049.3" y="133" width="7.1" height="15.0" fill="rgb(225,141,14)" rx="2" ry="2" />
<text  x="1052.34" y="143.5" ></text>
</g>
<g >
<title>motan.protocol.motan2.header:_M.pack_header (104 samples, 2.84%)</title><rect x="1015.9" y="133" width="33.4" height="15.0" fill="rgb(211,9,43)" rx="2" ry="2" />
<text  x="1018.86" y="143.5" >mo..</text>
</g>
<g >
<title>C:lj_cf_unpack (3 samples, 0.08%)</title><rect x="873.6" y="181" width="1.0" height="15.0" fill="rgb(238,153,44)" rx="2" ry="2" />
<text  x="876.60" y="191.5" ></text>
</g>
<g >
<title>C:lj_cf_debug_getinfo (76 samples, 2.07%)</title><rect x="1164.2" y="117" width="24.5" height="15.0" fill="rgb(242,80,33)" rx="2" ry="2" />
<text  x="1167.25" y="127.5" >C..</text>
</g>
<g >
<title>motan.serialize.simple_native.init:_M.deserialize (24 samples, 0.65%)</title><rect x="1151.7" y="117" width="7.7" height="15.0" fill="rgb(246,218,35)" rx="2" ry="2" />
<text  x="1154.70" y="127.5" ></text>
</g>
<g >
<title>C:lj_cf_ffi_string (10 samples, 0.27%)</title><rect x="750.0" y="101" width="3.2" height="15.0" fill="rgb(251,194,44)" rx="2" ry="2" />
<text  x="752.99" y="111.5" ></text>
</g>
<g >
<title>motan.provider.motan:_M.get_service_obj (2 samples, 0.05%)</title><rect x="1188.7" y="117" width="0.7" height="15.0" fill="rgb(227,13,17)" rx="2" ry="2" />
<text  x="1191.71" y="127.5" ></text>
</g>
<g >
<title>motan.thread:_M.spawn (3 samples, 0.08%)</title><rect x="872.3" y="117" width="1.0" height="15.0" fill="rgb(219,29,31)" rx="2" ry="2" />
<text  x="875.31" y="127.5" ></text>
</g>
<g >
<title>C:lj_ffh_tonumber (15 samples, 0.41%)</title><rect x="1159.4" y="117" width="4.8" height="15.0" fill="rgb(248,83,16)" rx="2" ry="2" />
<text  x="1162.42" y="127.5" ></text>
</g>
<g >
<title>C:lj_cf_coroutine_running (3 samples, 0.08%)</title><rect x="889.0" y="149" width="1.0" height="15.0" fill="rgb(226,91,45)" rx="2" ry="2" />
<text  x="892.05" y="159.5" ></text>
</g>
<g >
<title>C:lj_cf_ffi_meta___call (13 samples, 0.35%)</title><rect x="854.6" y="85" width="4.2" height="15.0" fill="rgb(254,92,54)" rx="2" ry="2" />
<text  x="857.60" y="95.5" ></text>
</g>
<g >
<title>motan.utils:_M.unpack_request_id (55 samples, 1.50%)</title><rect x="852.7" y="101" width="17.7" height="15.0" fill="rgb(253,31,15)" rx="2" ry="2" />
<text  x="855.67" y="111.5" ></text>
</g>
<g >
<title>C:lj_cf_ffi_clib___index (3 samples, 0.08%)</title><rect x="853.6" y="85" width="1.0" height="15.0" fill="rgb(233,193,47)" rx="2" ry="2" />
<text  x="856.64" y="95.5" ></text>
</g>
<g >
<title>motan.protocol.motan2.codec:_M.encode (220 samples, 6.00%)</title><rect x="994.3" y="149" width="70.8" height="15.0" fill="rgb(245,93,48)" rx="2" ry="2" />
<text  x="997.30" y="159.5" >motan.pr..</text>
</g>
<g >
<title>motan.core.response:_M.new (2 samples, 0.05%)</title><rect x="1114.4" y="101" width="0.6" height="15.0" fill="rgb(222,162,50)" rx="2" ry="2" />
<text  x="1117.36" y="111.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_socket_tcp_receive (184 samples, 5.02%)</title><rect x="760.9" y="101" width="59.3" height="15.0" fill="rgb(246,48,48)" rx="2" ry="2" />
<text  x="763.94" y="111.5" >C:ngx_..</text>
</g>
<g >
<title>C:lj_cf_table_new (10 samples, 0.27%)</title><rect x="753.5" y="101" width="3.3" height="15.0" fill="rgb(238,136,33)" rx="2" ry="2" />
<text  x="756.54" y="111.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_socket_tcp_send (211 samples, 5.76%)</title><rect x="926.4" y="149" width="67.9" height="15.0" fill="rgb(249,127,44)" rx="2" ry="2" />
<text  x="929.38" y="159.5" >C:ngx_s..</text>
</g>
<g >
<title>C:lj_cf_table_concat (12 samples, 0.33%)</title><rect x="922.5" y="149" width="3.9" height="15.0" fill="rgb(230,183,49)" rx="2" ry="2" />
<text  x="925.52" y="159.5" ></text>
</g>
<g >
<title>motan.filter.metrics:_M.filter (109 samples, 2.97%)</title><rect x="1114.4" y="117" width="35.0" height="15.0" fill="rgb(210,23,42)" rx="2" ry="2" />
<text  x="1117.36" y="127.5" >mo..</text>
</g>
<g >
<title>motan.protocol.motan2.header:_M.new (7 samples, 0.19%)</title><rect x="820.2" y="101" width="2.2" height="15.0" fill="rgb(241,133,9)" rx="2" ry="2" />
<text  x="823.16" y="111.5" ></text>
</g>
<g >
<title>motan.utils:_b2n (6 samples, 0.16%)</title><rect x="870.4" y="101" width="1.9" height="15.0" fill="rgb(236,65,30)" rx="2" ry="2" />
<text  x="873.38" y="111.5" ></text>
</g>
<g >
<title>C:lj_ffh_next (2 samples, 0.05%)</title><rect x="1189.4" y="117" width="0.6" height="15.0" fill="rgb(212,22,43)" rx="2" ry="2" />
<text  x="1192.36" y="127.5" ></text>
</g>
<g >
<title>motan.init:Motan.content_motan_server (2,682 samples, 73.16%)</title><rect x="10.0" y="165" width="863.3" height="15.0" fill="rgb(220,20,9)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >motan.init:Motan.content_motan_server</text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_now (6 samples, 0.16%)</title><rect x="874.6" y="181" width="1.9" height="15.0" fill="rgb(205,175,14)" rx="2" ry="2" />
<text  x="877.56" y="191.5" ></text>
</g>
<g >
<title>C:lj_cf_table_concat (12 samples, 0.33%)</title><rect x="756.8" y="85" width="3.8" height="15.0" fill="rgb(234,67,54)" rx="2" ry="2" />
<text  x="759.75" y="95.5" ></text>
</g>
<g >
<title>motan.init:clean_motan_ctx (110 samples, 3.00%)</title><rect x="886.8" y="165" width="35.4" height="15.0" fill="rgb(247,26,23)" rx="2" ry="2" />
<text  x="889.79" y="175.5" >mot..</text>
</g>
<g >
<title>all (3,666 samples, 100%)</title><rect x="10.0" y="197" width="1180.0" height="15.0" fill="rgb(235,179,47)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>motan.utils:_M.explode (56 samples, 1.53%)</title><rect x="823.7" y="101" width="18.0" height="15.0" fill="rgb(252,111,34)" rx="2" ry="2" />
<text  x="826.70" y="111.5" ></text>
</g>
<g >
<title>motan.utils:_M.msb_numbertobytes (9 samples, 0.25%)</title><rect x="1025.2" y="117" width="2.9" height="15.0" fill="rgb(231,15,22)" rx="2" ry="2" />
<text  x="1028.20" y="127.5" ></text>
</g>
<g >
<title>C:lj_ffh_pcall (30 samples, 0.82%)</title><rect x="1083.1" y="117" width="9.7" height="15.0" fill="rgb(220,87,38)" rx="2" ry="2" />
<text  x="1086.14" y="127.5" ></text>
</g>
<g >
<title>motan.filter.accesslog:_M.filter (109 samples, 2.97%)</title><rect x="1114.4" y="133" width="35.0" height="15.0" fill="rgb(220,133,54)" rx="2" ry="2" />
<text  x="1117.36" y="143.5" >mo..</text>
</g>
<g >
<title>motan.thread:15 (974 samples, 26.57%)</title><rect x="876.5" y="181" width="313.5" height="15.0" fill="rgb(241,115,35)" rx="2" ry="2" />
<text  x="879.49" y="191.5" >motan.thread:15</text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_get (19 samples, 0.52%)</title><rect x="1142.4" y="69" width="6.1" height="15.0" fill="rgb(211,84,52)" rx="2" ry="2" />
<text  x="1145.36" y="79.5" ></text>
</g>
<g >
<title>C:lj_cf_ffi_string (1 samples, 0.03%)</title><rect x="873.3" y="181" width="0.3" height="15.0" fill="rgb(233,180,38)" rx="2" ry="2" />
<text  x="876.27" y="191.5" ></text>
</g>
<g >
<title>VideoService.lua:_M:JustForT (44 samples, 1.20%)</title><rect x="1124.3" y="69" width="14.2" height="15.0" fill="rgb(247,180,25)" rx="2" ry="2" />
<text  x="1127.34" y="79.5" ></text>
</g>
<g >
<title>motan.init:motan_ctx (25 samples, 0.68%)</title><rect x="1140.4" y="85" width="8.1" height="15.0" fill="rgb(224,214,28)" rx="2" ry="2" />
<text  x="1143.43" y="95.5" ></text>
</g>
<g >
<title>C:lj_ffh_next (1 samples, 0.03%)</title><rect x="1149.1" y="53" width="0.3" height="15.0" fill="rgb(243,26,28)" rx="2" ry="2" />
<text  x="1152.12" y="63.5" ></text>
</g>
<g >
<title>C:lj_cf_table_insert (12 samples, 0.33%)</title><rect x="1045.5" y="101" width="3.8" height="15.0" fill="rgb(225,128,53)" rx="2" ry="2" />
<text  x="1048.48" y="111.5" ></text>
</g>
<g >
<title>motan.protocol.motan2.message:_M.new (56 samples, 1.53%)</title><rect x="1065.1" y="133" width="18.0" height="15.0" fill="rgb(207,110,46)" rx="2" ry="2" />
<text  x="1068.11" y="143.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_get (88 samples, 2.40%)</title><rect x="891.6" y="149" width="28.3" height="15.0" fill="rgb(235,136,18)" rx="2" ry="2" />
<text  x="894.62" y="159.5" >C:..</text>
</g>
<g >
<title>C:lj_ffh_next (2 samples, 0.05%)</title><rect x="1188.7" y="85" width="0.7" height="15.0" fill="rgb(247,44,36)" rx="2" ry="2" />
<text  x="1191.71" y="95.5" ></text>
</g>
<g >
<title>motan.init:motan_ctx (16 samples, 0.44%)</title><rect x="1133.3" y="53" width="5.2" height="15.0" fill="rgb(242,133,44)" rx="2" ry="2" />
<text  x="1136.35" y="63.5" ></text>
</g>
<g >
<title>motan.provider.motan:_M.get_service_obj (3 samples, 0.08%)</title><rect x="1148.5" y="85" width="0.9" height="15.0" fill="rgb(229,197,24)" rx="2" ry="2" />
<text  x="1151.48" y="95.5" ></text>
</g>
<g >
<title>C:lj_ffh_pcall (24 samples, 0.65%)</title><rect x="1151.7" y="101" width="7.7" height="15.0" fill="rgb(222,48,29)" rx="2" ry="2" />
<text  x="1154.70" y="111.5" ></text>
</g>
<g >
<title>C:lj_cf_ffi_new (36 samples, 0.98%)</title><rect x="1031.6" y="101" width="11.6" height="15.0" fill="rgb(228,43,28)" rx="2" ry="2" />
<text  x="1034.64" y="111.5" ></text>
</g>
<g >
<title>motan.server.init:service_calling (832 samples, 22.70%)</title><rect x="922.2" y="165" width="267.8" height="15.0" fill="rgb(210,161,13)" rx="2" ry="2" />
<text  x="925.20" y="175.5" >motan.server.init:service_calling</text>
</g>
<g >
<title>motan.utils:_M.is_empty (2 samples, 0.05%)</title><rect x="1188.7" y="101" width="0.7" height="15.0" fill="rgb(246,118,44)" rx="2" ry="2" />
<text  x="1191.71" y="111.5" ></text>
</g>
<g >
<title>motan.server.init:get_service_method_args_num (78 samples, 2.13%)</title><rect x="1164.2" y="133" width="25.2" height="15.0" fill="rgb(212,116,30)" rx="2" ry="2" />
<text  x="1167.25" y="143.5" >m..</text>
</g>
<g >
<title>motan.protocol.motan2.message:_M.get_service_key (15 samples, 0.41%)</title><rect x="1159.4" y="133" width="4.8" height="15.0" fill="rgb(231,166,53)" rx="2" ry="2" />
<text  x="1162.42" y="143.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_log (7 samples, 0.19%)</title><rect x="919.9" y="149" width="2.3" height="15.0" fill="rgb(228,128,5)" rx="2" ry="2" />
<text  x="922.95" y="159.5" ></text>
</g>
<g >
<title>motan.core.request:_M.new (45 samples, 1.23%)</title><rect x="1099.9" y="133" width="14.5" height="15.0" fill="rgb(211,123,25)" rx="2" ry="2" />
<text  x="1102.87" y="143.5" ></text>
</g>
<g >
<title>C:lj_cf_ffi_string (5 samples, 0.14%)</title><rect x="1020.7" y="117" width="1.6" height="15.0" fill="rgb(232,76,8)" rx="2" ry="2" />
<text  x="1023.69" y="127.5" ></text>
</g>
<g >
<title>motan.protocol.motan2.init:_M.convert_to_request (31 samples, 0.85%)</title><rect x="1149.4" y="133" width="10.0" height="15.0" fill="rgb(245,96,14)" rx="2" ry="2" />
<text  x="1152.44" y="143.5" ></text>
</g>
<g >
<title>C:lj_cf_ffi_new (36 samples, 0.98%)</title><rect x="858.8" y="85" width="11.6" height="15.0" fill="rgb(250,92,13)" rx="2" ry="2" />
<text  x="861.79" y="95.5" ></text>
</g>
<g >
<title>C:lj_ffh_tostring (5 samples, 0.14%)</title><rect x="890.0" y="149" width="1.6" height="15.0" fill="rgb(234,228,14)" rx="2" ry="2" />
<text  x="893.01" y="159.5" ></text>
</g>
<g >
<title>motan.serialize.simple_native.init:_serialize (30 samples, 0.82%)</title><rect x="1083.1" y="133" width="9.7" height="15.0" fill="rgb(206,8,37)" rx="2" ry="2" />
<text  x="1086.14" y="143.5" ></text>
</g>
<g >
<title>motan.protocol.motan2.init:_M.convert_to_response_msg (86 samples, 2.35%)</title><rect x="1065.1" y="149" width="27.7" height="15.0" fill="rgb(246,39,53)" rx="2" ry="2" />
<text  x="1068.11" y="159.5" >m..</text>
</g>
<g >
<title>motan.provider.motan:_M.call (107 samples, 2.92%)</title><rect x="1115.0" y="101" width="34.4" height="15.0" fill="rgb(253,118,39)" rx="2" ry="2" />
<text  x="1118.00" y="111.5" >mo..</text>
</g>
<g >
<title>motan.utils:_n2b (27 samples, 0.74%)</title><rect x="1056.4" y="133" width="8.7" height="15.0" fill="rgb(223,177,21)" rx="2" ry="2" />
<text  x="1059.42" y="143.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_get (11 samples, 0.30%)</title><rect x="1135.0" y="37" width="3.5" height="15.0" fill="rgb(213,122,35)" rx="2" ry="2" />
<text  x="1137.96" y="47.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_uthread_spawn (2,259 samples, 61.62%)</title><rect x="12.9" y="117" width="727.1" height="15.0" fill="rgb(216,221,41)" rx="2" ry="2" />
<text  x="15.90" y="127.5" >C:ngx_stream_lua_uthread_spawn</text>
</g>
<g >
<title>motan.utils:_M.is_empty (1 samples, 0.03%)</title><rect x="1149.1" y="69" width="0.3" height="15.0" fill="rgb(227,25,48)" rx="2" ry="2" />
<text  x="1152.12" y="79.5" ></text>
</g>
<g >
<title>motan.protocol.motan2.message:_M.new (4 samples, 0.11%)</title><rect x="822.4" y="101" width="1.3" height="15.0" fill="rgb(242,189,5)" rx="2" ry="2" />
<text  x="825.42" y="111.5" ></text>
</g>
<g >
<title>motan.utils:_M.pack_request_id (47 samples, 1.28%)</title><rect x="1028.1" y="117" width="15.1" height="15.0" fill="rgb(224,183,48)" rx="2" ry="2" />
<text  x="1031.10" y="127.5" ></text>
</g>
<g >
<title>motan.server.init:_M.run (2,682 samples, 73.16%)</title><rect x="10.0" y="149" width="863.3" height="15.0" fill="rgb(219,22,38)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >motan.server.init:_M.run</text>
</g>
<g >
<title>C:lj_cf_ffi_meta___call (8 samples, 0.22%)</title><rect x="1029.1" y="101" width="2.5" height="15.0" fill="rgb(205,153,17)" rx="2" ry="2" />
<text  x="1032.06" y="111.5" ></text>
</g>
<g >
<title>C:lj_ffh_pcall (44 samples, 1.20%)</title><rect x="1124.3" y="85" width="14.2" height="15.0" fill="rgb(240,164,7)" rx="2" ry="2" />
<text  x="1127.34" y="95.5" ></text>
</g>
<g >
<title>motan.utils:_M.is_empty (2 samples, 0.05%)</title><rect x="1189.4" y="133" width="0.6" height="15.0" fill="rgb(232,217,49)" rx="2" ry="2" />
<text  x="1192.36" y="143.5" ></text>
</g>
<g >
<title>C:lj_cf_coroutine_running (2 samples, 0.05%)</title><rect x="1134.3" y="37" width="0.7" height="15.0" fill="rgb(228,172,10)" rx="2" ry="2" />
<text  x="1137.32" y="47.5" ></text>
</g>
</g>
</svg>
