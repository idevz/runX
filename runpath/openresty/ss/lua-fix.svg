<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="278.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="261" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="261" > </text>
<g id="frames">
<g >
<title>C:lj_cf_ffi_clib___index (1 samples, 0.03%)</title><rect x="980.6" y="133" width="0.3" height="15.0" fill="rgb(244,22,51)" rx="2" ry="2" />
<text  x="983.61" y="143.5" ></text>
</g>
<g >
<title>motan.utils:_M.pack_request_id (41 samples, 1.13%)</title><rect x="980.0" y="149" width="13.3" height="15.0" fill="rgb(219,216,18)" rx="2" ry="2" />
<text  x="982.96" y="159.5" ></text>
</g>
<g >
<title>C:lj_cf_ffi_meta___call (11 samples, 0.30%)</title><rect x="848.2" y="117" width="3.6" height="15.0" fill="rgb(231,92,47)" rx="2" ry="2" />
<text  x="851.20" y="127.5" ></text>
</g>
<g >
<title>motan.server.init:_M.resp (17 samples, 0.47%)</title><rect x="1013.6" y="181" width="5.5" height="15.0" fill="rgb(252,161,11)" rx="2" ry="2" />
<text  x="1016.55" y="191.5" ></text>
</g>
<g >
<title>C:lj_cf_table_concat (12 samples, 0.33%)</title><rect x="964.6" y="165" width="3.9" height="15.0" fill="rgb(246,112,11)" rx="2" ry="2" />
<text  x="967.63" y="175.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_uthread_spawn (2,435 samples, 67.30%)</title><rect x="12.3" y="149" width="794.2" height="15.0" fill="rgb(245,54,27)" rx="2" ry="2" />
<text  x="15.28" y="159.5" >C:ngx_stream_lua_uthread_spawn</text>
</g>
<g >
<title>motan.utils:_M.is_empty (1 samples, 0.03%)</title><rect x="1161.0" y="101" width="0.3" height="15.0" fill="rgb(217,180,30)" rx="2" ry="2" />
<text  x="1163.97" y="111.5" ></text>
</g>
<g >
<title>C:lj_cf_table_insert (12 samples, 0.33%)</title><rect x="995.0" y="133" width="3.9" height="15.0" fill="rgb(254,25,19)" rx="2" ry="2" />
<text  x="997.96" y="143.5" ></text>
</g>
<g >
<title>C:lj_cf_ffi_string (6 samples, 0.17%)</title><rect x="811.0" y="133" width="2.0" height="15.0" fill="rgb(249,164,4)" rx="2" ry="2" />
<text  x="814.02" y="143.5" ></text>
</g>
<g >
<title>C:lj_ffh_pcall (366 samples, 10.12%)</title><rect x="1032.1" y="117" width="119.4" height="15.0" fill="rgb(237,37,11)" rx="2" ry="2" />
<text  x="1035.14" y="127.5" >C:lj_ffh_pcall</text>
</g>
<g >
<title>motan.protocol.motan2.init:_M.convert_to_response_msg (21 samples, 0.58%)</title><rect x="1006.7" y="181" width="6.9" height="15.0" fill="rgb(215,82,44)" rx="2" ry="2" />
<text  x="1009.71" y="191.5" ></text>
</g>
<g >
<title>motan.utils:_M.is_empty (2 samples, 0.06%)</title><rect x="1189.3" y="133" width="0.7" height="15.0" fill="rgb(208,108,20)" rx="2" ry="2" />
<text  x="1192.35" y="143.5" ></text>
</g>
<g >
<title>motan.filter.accesslog:_M.filter (423 samples, 11.69%)</title><rect x="1023.3" y="165" width="138.0" height="15.0" fill="rgb(236,177,36)" rx="2" ry="2" />
<text  x="1026.34" y="175.5" >motan.filter.acce..</text>
</g>
<g >
<title>motan.provider.motan:_M.call (416 samples, 11.50%)</title><rect x="1025.6" y="133" width="135.7" height="15.0" fill="rgb(225,184,11)" rx="2" ry="2" />
<text  x="1028.62" y="143.5" >motan.provider.mo..</text>
</g>
<g >
<title>motan.utils:_M.msb_numbertobytes (13 samples, 0.36%)</title><rect x="975.7" y="149" width="4.3" height="15.0" fill="rgb(228,167,53)" rx="2" ry="2" />
<text  x="978.72" y="159.5" ></text>
</g>
<g >
<title>motan.server.init:invoker (524 samples, 14.48%)</title><rect x="1019.1" y="181" width="170.9" height="15.0" fill="rgb(214,206,5)" rx="2" ry="2" />
<text  x="1022.10" y="191.5" >motan.server.init:invo..</text>
</g>
<g >
<title>C:lj_ffh_string_byte (1 samples, 0.03%)</title><rect x="847.2" y="117" width="0.3" height="15.0" fill="rgb(230,114,28)" rx="2" ry="2" />
<text  x="850.22" y="127.5" ></text>
</g>
<g >
<title>motan.provider.motan:_M.get_service_obj (2 samples, 0.06%)</title><rect x="1189.3" y="149" width="0.7" height="15.0" fill="rgb(241,229,33)" rx="2" ry="2" />
<text  x="1192.35" y="159.5" ></text>
</g>
<g >
<title>motan.core.response:_M.new (6 samples, 0.17%)</title><rect x="1023.7" y="133" width="1.9" height="15.0" fill="rgb(211,213,46)" rx="2" ry="2" />
<text  x="1026.67" y="143.5" ></text>
</g>
<g >
<title>C:lj_ffh_pcall (17 samples, 0.47%)</title><rect x="1008.0" y="149" width="5.6" height="15.0" fill="rgb(251,168,12)" rx="2" ry="2" />
<text  x="1011.01" y="159.5" ></text>
</g>
<g >
<title>C:lj_cf_table_insert (13 samples, 0.36%)</title><rect x="1147.3" y="37" width="4.2" height="15.0" fill="rgb(230,134,44)" rx="2" ry="2" />
<text  x="1150.27" y="47.5" ></text>
</g>
<g >
<title>motan.protocol.motan2.codec:_M.decode (169 samples, 4.67%)</title><rect x="806.5" y="149" width="55.1" height="15.0" fill="rgb(221,220,37)" rx="2" ry="2" />
<text  x="809.45" y="159.5" >motan..</text>
</g>
<g >
<title>C:lj_cf_table_concat (7 samples, 0.19%)</title><rect x="1040.3" y="85" width="2.3" height="15.0" fill="rgb(216,112,33)" rx="2" ry="2" />
<text  x="1043.30" y="95.5" ></text>
</g>
<g >
<title>C:lj_cf_ffi_string (4 samples, 0.11%)</title><rect x="973.4" y="149" width="1.3" height="15.0" fill="rgb(233,52,29)" rx="2" ry="2" />
<text  x="976.44" y="159.5" ></text>
</g>
<g >
<title>motan.core.request:_M.new (6 samples, 0.17%)</title><rect x="1021.4" y="165" width="1.9" height="15.0" fill="rgb(213,153,42)" rx="2" ry="2" />
<text  x="1024.38" y="175.5" ></text>
</g>
<g >
<title>C:motan_simple_deserialize (14 samples, 0.39%)</title><rect x="1162.9" y="117" width="4.6" height="15.0" fill="rgb(242,30,21)" rx="2" ry="2" />
<text  x="1165.93" y="127.5" ></text>
</g>
<g >
<title>motan.init:motan_ctx (37 samples, 1.02%)</title><rect x="1123.1" y="85" width="12.1" height="15.0" fill="rgb(220,120,43)" rx="2" ry="2" />
<text  x="1126.14" y="95.5" ></text>
</g>
<g >
<title>C:lj_cf_coroutine_running (1 samples, 0.03%)</title><rect x="1154.8" y="101" width="0.3" height="15.0" fill="rgb(239,86,3)" rx="2" ry="2" />
<text  x="1157.78" y="111.5" ></text>
</g>
<g >
<title>C:lj_ffh_tostring (6 samples, 0.17%)</title><rect x="867.4" y="181" width="2.0" height="15.0" fill="rgb(225,20,24)" rx="2" ry="2" />
<text  x="870.44" y="191.5" ></text>
</g>
<g >
<title>VideoService.lua:_M:JustForT (366 samples, 10.12%)</title><rect x="1032.1" y="101" width="119.4" height="15.0" fill="rgb(211,132,19)" rx="2" ry="2" />
<text  x="1035.14" y="111.5" >VideoService.l..</text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_now (4 samples, 0.11%)</title><rect x="1151.5" y="117" width="1.3" height="15.0" fill="rgb(222,110,2)" rx="2" ry="2" />
<text  x="1154.51" y="127.5" ></text>
</g>
<g >
<title>motan.utils:_b2n (3 samples, 0.08%)</title><rect x="860.6" y="133" width="1.0" height="15.0" fill="rgb(221,98,48)" rx="2" ry="2" />
<text  x="863.59" y="143.5" ></text>
</g>
<g >
<title>motan.server.init:_M.motan_server_do_request (2,607 samples, 72.06%)</title><rect x="11.6" y="165" width="850.3" height="15.0" fill="rgb(233,69,30)" rx="2" ry="2" />
<text  x="14.63" y="175.5" >motan.server.init:_M.motan_server_do_request</text>
</g>
<g >
<title>motan.server.init:service_calling (956 samples, 26.42%)</title><rect x="878.2" y="197" width="311.8" height="15.0" fill="rgb(229,59,22)" rx="2" ry="2" />
<text  x="881.20" y="207.5" >motan.server.init:service_calling</text>
</g>
<g >
<title>motan.filter.metrics:_M.filter (423 samples, 11.69%)</title><rect x="1023.3" y="149" width="138.0" height="15.0" fill="rgb(210,168,21)" rx="2" ry="2" />
<text  x="1026.34" y="159.5" >motan.filter.metr..</text>
</g>
<g >
<title>motan.serialize.simple_native.init:_M.deserialize (14 samples, 0.39%)</title><rect x="1162.9" y="149" width="4.6" height="15.0" fill="rgb(208,194,31)" rx="2" ry="2" />
<text  x="1165.93" y="159.5" ></text>
</g>
<g >
<title>motan.utils:_M.unpack_request_id (40 samples, 1.11%)</title><rect x="847.5" y="133" width="13.1" height="15.0" fill="rgb(228,151,28)" rx="2" ry="2" />
<text  x="850.55" y="143.5" ></text>
</g>
<g >
<title>C:lj_ffh_next (2 samples, 0.06%)</title><rect x="1189.3" y="117" width="0.7" height="15.0" fill="rgb(226,148,17)" rx="2" ry="2" />
<text  x="1192.35" y="127.5" ></text>
</g>
<g >
<title>motan.init:motan_ctx (25 samples, 0.69%)</title><rect x="1152.8" y="117" width="8.2" height="15.0" fill="rgb(234,96,51)" rx="2" ry="2" />
<text  x="1155.82" y="127.5" ></text>
</g>
<g >
<title>=content_by_lua(app-dev.conf:29):1 (2,612 samples, 72.19%)</title><rect x="10.0" y="213" width="851.9" height="15.0" fill="rgb(220,127,29)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >=content_by_lua(app-dev.conf:29):1</text>
</g>
<g >
<title>C:lj_cf_table_insert (14 samples, 0.39%)</title><rect x="1002.1" y="149" width="4.6" height="15.0" fill="rgb(247,35,41)" rx="2" ry="2" />
<text  x="1005.14" y="159.5" ></text>
</g>
<g >
<title>C:lj_ffh_pcall (14 samples, 0.39%)</title><rect x="1162.9" y="133" width="4.6" height="15.0" fill="rgb(220,57,40)" rx="2" ry="2" />
<text  x="1165.93" y="143.5" ></text>
</g>
<g >
<title>all (3,618 samples, 100%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(231,3,12)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>motan.thread:15 (1,004 samples, 27.75%)</title><rect x="862.5" y="213" width="327.5" height="15.0" fill="rgb(212,207,29)" rx="2" ry="2" />
<text  x="865.55" y="223.5" >motan.thread:15</text>
</g>
<g >
<title>motan.utils:_n2b (15 samples, 0.41%)</title><rect x="1001.8" y="165" width="4.9" height="15.0" fill="rgb(242,130,1)" rx="2" ry="2" />
<text  x="1004.81" y="175.5" ></text>
</g>
<g >
<title>motan.utils:_M.write (50 samples, 1.38%)</title><rect x="1135.2" y="85" width="16.3" height="15.0" fill="rgb(207,201,25)" rx="2" ry="2" />
<text  x="1138.21" y="95.5" ></text>
</g>
<g >
<title>motan.provider.motan:_M.get_service_obj (1 samples, 0.03%)</title><rect x="1161.0" y="117" width="0.3" height="15.0" fill="rgb(225,219,53)" rx="2" ry="2" />
<text  x="1163.97" y="127.5" ></text>
</g>
<g >
<title>C:lj_cf_unpack (1 samples, 0.03%)</title><rect x="861.9" y="213" width="0.3" height="15.0" fill="rgb(245,46,34)" rx="2" ry="2" />
<text  x="864.90" y="223.5" ></text>
</g>
<g >
<title>C:lj_cf_debug_getinfo (67 samples, 1.85%)</title><rect x="1167.5" y="149" width="21.8" height="15.0" fill="rgb(251,159,12)" rx="2" ry="2" />
<text  x="1170.50" y="159.5" >C..</text>
</g>
<g >
<title>C:lj_ffh_next (1 samples, 0.03%)</title><rect x="1161.0" y="85" width="0.3" height="15.0" fill="rgb(241,85,17)" rx="2" ry="2" />
<text  x="1163.97" y="95.5" ></text>
</g>
<g >
<title>motan.protocol.motan2.init:_M.convert_to_request (19 samples, 0.53%)</title><rect x="1161.3" y="165" width="6.2" height="15.0" fill="rgb(225,162,47)" rx="2" ry="2" />
<text  x="1164.30" y="175.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_log (2 samples, 0.06%)</title><rect x="877.6" y="181" width="0.6" height="15.0" fill="rgb(228,217,5)" rx="2" ry="2" />
<text  x="880.55" y="191.5" ></text>
</g>
<g >
<title>C:lj_cf_coroutine_running (3 samples, 0.08%)</title><rect x="1124.4" y="69" width="1.0" height="15.0" fill="rgb(220,100,26)" rx="2" ry="2" />
<text  x="1127.44" y="79.5" ></text>
</g>
<g >
<title>motan.utils:eat_last_comma (3 samples, 0.08%)</title><rect x="1137.8" y="69" width="1.0" height="15.0" fill="rgb(245,78,23)" rx="2" ry="2" />
<text  x="1140.82" y="79.5" ></text>
</g>
<g >
<title>motan.init:Motan.content_motan_server (2,612 samples, 72.19%)</title><rect x="10.0" y="197" width="851.9" height="15.0" fill="rgb(238,94,54)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >motan.init:Motan.content_motan_server</text>
</g>
<g >
<title>motan.utils:putln (13 samples, 0.36%)</title><rect x="1147.3" y="53" width="4.2" height="15.0" fill="rgb(245,157,31)" rx="2" ry="2" />
<text  x="1150.27" y="63.5" ></text>
</g>
<g >
<title>motan.protocol.motan2.header:_M.new (1 samples, 0.03%)</title><rect x="832.5" y="133" width="0.4" height="15.0" fill="rgb(235,209,20)" rx="2" ry="2" />
<text  x="835.54" y="143.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_get (25 samples, 0.69%)</title><rect x="869.4" y="181" width="8.2" height="15.0" fill="rgb(254,52,8)" rx="2" ry="2" />
<text  x="872.40" y="191.5" ></text>
</g>
<g >
<title>motan.utils:_M.msb_stringtonumber (7 samples, 0.19%)</title><rect x="845.3" y="133" width="2.2" height="15.0" fill="rgb(243,104,14)" rx="2" ry="2" />
<text  x="848.26" y="143.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_socket_tcp_send (218 samples, 6.03%)</title><rect x="878.5" y="181" width="71.1" height="15.0" fill="rgb(238,84,54)" rx="2" ry="2" />
<text  x="881.53" y="191.5" >C:ngx_st..</text>
</g>
<g >
<title>motan.serialize.simple_native.init:_serialize (17 samples, 0.47%)</title><rect x="1008.0" y="165" width="5.6" height="15.0" fill="rgb(239,12,9)" rx="2" ry="2" />
<text  x="1011.01" y="175.5" ></text>
</g>
<g >
<title>motan.protocol.motan2.message:_M.new (2 samples, 0.06%)</title><rect x="1007.4" y="165" width="0.6" height="15.0" fill="rgb(209,194,54)" rx="2" ry="2" />
<text  x="1010.36" y="175.5" ></text>
</g>
<g >
<title>C:lj_cf_table_insert (1 samples, 0.03%)</title><rect x="813.0" y="133" width="0.3" height="15.0" fill="rgb(228,82,3)" rx="2" ry="2" />
<text  x="815.97" y="143.5" ></text>
</g>
<g >
<title>C:lj_cf_ffi_new (27 samples, 0.75%)</title><rect x="851.8" y="117" width="8.8" height="15.0" fill="rgb(233,131,39)" rx="2" ry="2" />
<text  x="854.79" y="127.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_get (18 samples, 0.50%)</title><rect x="1155.1" y="101" width="5.9" height="15.0" fill="rgb(239,97,31)" rx="2" ry="2" />
<text  x="1158.10" y="111.5" ></text>
</g>
<g >
<title>motan.protocol.motan2.codec:_M.encode (175 samples, 4.84%)</title><rect x="949.6" y="181" width="57.1" height="15.0" fill="rgb(252,68,30)" rx="2" ry="2" />
<text  x="952.63" y="191.5" >motan...</text>
</g>
<g >
<title>C:lj_cf_table_concat (3 samples, 0.08%)</title><rect x="974.7" y="149" width="1.0" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="977.74" y="159.5" ></text>
</g>
<g >
<title>C:lj_cf_table_new (5 samples, 0.14%)</title><rect x="813.3" y="133" width="1.6" height="15.0" fill="rgb(215,145,50)" rx="2" ry="2" />
<text  x="816.30" y="143.5" ></text>
</g>
<g >
<title>motan.utils:_M.explode (34 samples, 0.94%)</title><rect x="834.2" y="133" width="11.1" height="15.0" fill="rgb(252,90,11)" rx="2" ry="2" />
<text  x="837.17" y="143.5" ></text>
</g>
<g >
<title>C:lj_cf_table_concat (1 samples, 0.03%)</title><rect x="814.9" y="117" width="0.4" height="15.0" fill="rgb(209,86,34)" rx="2" ry="2" />
<text  x="817.93" y="127.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_worker_exiting (1 samples, 0.03%)</title><rect x="11.3" y="165" width="0.3" height="15.0" fill="rgb(249,159,34)" rx="2" ry="2" />
<text  x="14.30" y="175.5" ></text>
</g>
<g >
<title>motan.server.init:_M.run (2,612 samples, 72.19%)</title><rect x="10.0" y="181" width="851.9" height="15.0" fill="rgb(254,25,51)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >motan.server.init:_M.run</text>
</g>
<g >
<title>C:lj_cf_ffi_new (29 samples, 0.80%)</title><rect x="983.9" y="133" width="9.4" height="15.0" fill="rgb(227,63,0)" rx="2" ry="2" />
<text  x="986.88" y="143.5" ></text>
</g>
<g >
<title>motan.protocol.motan2.header:_M.pack_header (93 samples, 2.57%)</title><rect x="968.5" y="165" width="30.4" height="15.0" fill="rgb(229,136,52)" rx="2" ry="2" />
<text  x="971.55" y="175.5" >mo..</text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_now (1 samples, 0.03%)</title><rect x="862.2" y="213" width="0.3" height="15.0" fill="rgb(214,17,9)" rx="2" ry="2" />
<text  x="865.22" y="223.5" ></text>
</g>
<g >
<title>C:lj_ffh_pcall (1 samples, 0.03%)</title><rect x="814.9" y="133" width="0.4" height="15.0" fill="rgb(230,148,1)" rx="2" ry="2" />
<text  x="817.93" y="143.5" ></text>
</g>
<g >
<title>C:lj_cf_coroutine_running (3 samples, 0.08%)</title><rect x="866.5" y="181" width="0.9" height="15.0" fill="rgb(243,162,34)" rx="2" ry="2" />
<text  x="869.46" y="191.5" ></text>
</g>
<g >
<title>motan.utils:_M.msb_numbertobytes (9 samples, 0.25%)</title><rect x="998.9" y="165" width="2.9" height="15.0" fill="rgb(208,0,20)" rx="2" ry="2" />
<text  x="1001.88" y="175.5" ></text>
</g>
<g >
<title>motan.utils:writeit (39 samples, 1.08%)</title><rect x="1138.8" y="69" width="12.7" height="15.0" fill="rgb(213,193,15)" rx="2" ry="2" />
<text  x="1141.79" y="79.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_socket_tcp_receive (53 samples, 1.46%)</title><rect x="815.3" y="133" width="17.2" height="15.0" fill="rgb(240,177,1)" rx="2" ry="2" />
<text  x="818.26" y="143.5" ></text>
</g>
<g >
<title>motan.protocol.motan2.message:_M.new (4 samples, 0.11%)</title><rect x="832.9" y="133" width="1.3" height="15.0" fill="rgb(215,33,31)" rx="2" ry="2" />
<text  x="835.87" y="143.5" ></text>
</g>
<g >
<title>motan.thread:_M.spawn (1 samples, 0.03%)</title><rect x="861.6" y="149" width="0.3" height="15.0" fill="rgb(248,65,37)" rx="2" ry="2" />
<text  x="864.57" y="159.5" ></text>
</g>
<g >
<title>C:lj_ffh_setmetatable (1 samples, 0.03%)</title><rect x="1023.3" y="133" width="0.4" height="15.0" fill="rgb(251,69,48)" rx="2" ry="2" />
<text  x="1026.34" y="143.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_get (30 samples, 0.83%)</title><rect x="1125.4" y="69" width="9.8" height="15.0" fill="rgb(248,2,21)" rx="2" ry="2" />
<text  x="1128.42" y="79.5" ></text>
</g>
<g >
<title>motan.init:clean_motan_ctx (39 samples, 1.08%)</title><rect x="865.5" y="197" width="12.7" height="15.0" fill="rgb(217,67,50)" rx="2" ry="2" />
<text  x="868.48" y="207.5" ></text>
</g>
<g >
<title>motan.utils:_n2b (17 samples, 0.47%)</title><rect x="993.3" y="149" width="5.6" height="15.0" fill="rgb(254,112,23)" rx="2" ry="2" />
<text  x="996.33" y="159.5" ></text>
</g>
<g >
<title>C:motan_simple_serialize (17 samples, 0.47%)</title><rect x="1008.0" y="133" width="5.6" height="15.0" fill="rgb(210,160,21)" rx="2" ry="2" />
<text  x="1011.01" y="143.5" ></text>
</g>
<g >
<title>motan.server.init:get_service_method_args_num (69 samples, 1.91%)</title><rect x="1167.5" y="165" width="22.5" height="15.0" fill="rgb(226,101,42)" rx="2" ry="2" />
<text  x="1170.50" y="175.5" >m..</text>
</g>
<g >
<title>C:lj_cf_ffi_meta___call (9 samples, 0.25%)</title><rect x="980.9" y="133" width="3.0" height="15.0" fill="rgb(212,31,9)" rx="2" ry="2" />
<text  x="983.94" y="143.5" ></text>
</g>
<g >
<title>C:ngx_stream_lua_ngx_log (247 samples, 6.83%)</title><rect x="1042.6" y="85" width="80.5" height="15.0" fill="rgb(248,228,31)" rx="2" ry="2" />
<text  x="1045.58" y="95.5" >C:ngx_str..</text>
</g>
</g>
</svg>
