#!/usr/bin/env bash

### BEGIN ###
# Author: idevz
# Since: 2018/03/12
# Description:       Set up Lua development environment.
# ./init.sh          Set up using $(pwd) as BASE_DIR, down which has lua source and binaries.
#
# Environment variables that control init:
# LV: Lua version which you want to install.
### END ###

set -ex

[ $HOME != '/home/z' ] && echo 'Are U Z ?' && exit 1
HTTP_PROXY_ADDR="http://10.211.55.2:8118"
NO_PROXY="localhost,127.0.0.1,::1"
BASE_DIR=${BASE_DIR:-"$(readlink -f "$(dirname "$0")")"}
PRI_REGISTRY="https://rok5leke.mirror.aliyuncs.com"
NODES=(kube2 kube3)

sudo_write() {
	local content="${1}"
	local file_name="${2}"
	local if_add=
	[ ! -z ${3} ] && if_add="-a"
	echo "${content}" | sudo tee ${if_add} "${file_name}" >/dev/null 2>&1
}

install_docker() {
	if [ $(uname -a | grep -o el8) == 'el8' ]; then
		sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
		sudo dnf install -y https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm \
			docker-ce
	else
		sudo yum install -y yum-utils \
			device-mapper-persistent-data \
			lvm2
		sudo yum-config-manager \
			--add-repo \
			https://download.docker.com/linux/centos/docker-ce.repo
		sudo yum-config-manager --enable docker-ce-edge
		sudo yum-config-manager --enable docker-ce-test
		# sudo yum-config-manager --disable docker-ce-edge
		sudo yum install -y docker-ce docker-ce-cli containerd.io
	fi
	local docker_service_unit=
	docker_service_unit=$(
		cat <<DOCKER_SERVICE
[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
After=network-online.target firewalld.service
Wants=network-online.target

[Service]
Type=notify
# the default is not to use systemd for cgroups because the delegate issues still
# exists and systemd currently does not support the cgroup feature set required
# for containers run by docker
ExecStart=/usr/bin/dockerd \
          --ipv6  --fixed-cidr-v6=2001:470:19:fea::/64 \
		  --registry-mirror=${PRI_REGISTRY}
ExecReload=/bin/kill -s HUP $MAINPID
Environment="HTTP_PROXY=${HTTP_PROXY_ADDR}" "HTTPS_PROXY=${HTTP_PROXY_ADDR}" "NO_PROXY=${NO_PROXY}"
# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
#TasksMax=infinity
TimeoutStartSec=0
# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes
# kill only the docker process, not all processes in the cgroup
KillMode=process
# restart the docker process if it exits prematurely
Restart=on-failure
StartLimitBurst=3
StartLimitInterval=60s

[Install]
WantedBy=multi-user.target
DOCKER_SERVICE
	)
	sudo_write "${docker_service_unit}" "/lib/systemd/system/docker.service"
	sudo mkdir "/etc/docker"
	local docker_daemon_json=
	docker_daemon_json=$(
		cat <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "50m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
EOF
	)
	sudo_write "${docker_daemon_json}" "/etc/docker/daemon.json"
	sudo mkdir -p /etc/systemd/system/docker.service.d
	sudo systemctl daemon-reload
	sudo systemctl start docker
	sudo systemctl enable docker
}

install_docker_compose() {
	install_python
	if [ $(uname -a | grep -o el8) == 'el8' ]; then
		sudo pip3 install docker-compose
	else
		sudo pip install docker-compose
	fi
}

preper_kubeadm() {
	KUBE_YUM=$(
		cat <<KUBE_Y
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kube*
KUBE_Y
	)
	sudo_write "${KUBE_YUM}" "/etc/yum.repos.d/kubernetes.repo"

	# Set SELinux in permissive mode (effectively disabling it)
	sudo setenforce 0
	sudo sed -i 's/^SELINUX=enforcing$/SELINUX=Disabled/' /etc/selinux/config

	sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

	sudo systemctl enable kubelet && sudo systemctl start kubelet

	KUBE_SYSCTL_CONF=$(
		cat <<KUBE_S
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1

net.ipv6.conf.default.forwarding=1
net.ipv6.conf.all.forwarding=1
KUBE_S
	)
	sudo_write "${KUBE_SYSCTL_CONF}" /etc/sysctl.d/k8s.conf
	sudo sysctl --system
}

init_kubeadm() {
	sudo swapoff -a #KUBELET_EXTRA_ARGS="--fail-swap-on=false"

	for kube_image in $(kubeadm config images list); do
		local private_kube_image="${PRI_REGISTRY}/${kube_image}"
		sudo docker pull "${private_kube_image}"
		sudo docker tag "${private_kube_image}" "${kube_image}"
	done

	local join=
	if [ ${HOSTNAME} = 'kube1' ]; then
		sudo kubeadm init --config $RUN_PATH/kubeadm.yaml >$RUN_PATH/init.out
		join=$(tail -10 $RUN_PATH/init.out | grep 'kubeadm join')
		join_sh=$(
			cat <<JOIN_SH
#!/usr/bin/env bash

### BEGIN ###
# Author: idevz
# Since: 2018/03/12
# Description:       AUTO Generate by runX.
# ./join.sh          Make a node join to a K8S cluster.
### END ###
sudo ${join}
JOIN_SH
		)
		for node in ${NODES}; do
			[ ! -d "$RUN_PATH/../${node}" ] && mkdir -p "$RUN_PATH/../${node}"
			echo "${join_sh}" >$RUN_PATH/../${node}/join.sh
			chmod +x $RUN_PATH/../${node}/join.sh
		done
	else
		sudo $RUN_PATH/join.sh
	fi
}

yum_http_proxy() {
	echo "proxy=${HTTP_PROXY_ADDR}" | sudo tee -a /etc/yum.conf
}

yum_packages() {
	sudo yum install -y strace \
		nc tree git patch patchelf perf \
		tcpdump psmisc zsh gcc gcc-c++ vim \
		nmap-ncat.x86_64 net-tools telnet \
		man man-pages \
		bind-utils # for nslookup, host OR dig

	if [ $(uname -a | grep -o el8) != 'el8' ]; then
		sudo yum install -y dtrace weighttp nmon ntpdate
	fi
}

install_python() {
	if [ $(uname -a | grep -o el8) == 'el8' ]; then
		sudo dnf install -y python36 python3-pip
		sudo alternatives --set python /usr/bin/python3
	else
		sudo yum install epel-release
		sudo yum install -y python-pip
	fi
}

init() {
	sudo systemctl stop firewalld &&
		sudo systemctl disable firewalld
	# yum_http_proxy
	yum_packages
	# init_out_going
	install_docker
	install_docker_compose
	# preper_kubeadm
	# init_kubeadm
	sudo usermod -aG docker z
}


	# install_docker
	install_docker_compose
	# preper_kubeadm
	# init_kubeadm
	sudo usermod -aG docker z